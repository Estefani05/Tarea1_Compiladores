Terminales-----------------------
	
	mas-> '+'
	mens-> '-'
	multi-> '*'
	div-> '//'
	mod-> '~'
	pote-> '**'

	eql-> '='

	isEqu-> '=='
	mayQue-> '>'
	menQue-> '<'
	mayEquQue-> '>='
	menEquQue-> '<='
	dife-> '!='
	sumUn-> '++'
	resUn-> '--' 
	
	endExp-> '?'
	
	dot-> '.'
	comma-> ','
	parentIz-> '('
	parentDe-> ')'
	
	main-> 'main'

	true-> 'true'
	false-> 'false'

	and-> '^'
	or-> '#'
	nega-> '!'

	iniBlock-> '\'
	endBlock-> '/'

	if-> 'if'
	elif-> 'elif'
	else-> 'else'

	doWhile-> 'doWhile'
	break-> 'break'
	for-> 'for'
	return-> 'return'
	
 	read-> 'leer'
	print-> 'impr'


	arreg-> 'arrx' 
	matrix-> 'matrx'

	funcion-> 'func'
	parametro-> 'param'

	numEnt-> [0-9]+
	numFlo-> [1-9].?[0-9]*
	char-> [a-zA-Z_]

No Terminales------------------------

	main-> expr
	
	expr-> expr expr

	opArit-> mas | mens | multi | div | mod | pote | eql
	opRela-> isEqu |  | mayQue | menQue | mayEquQue | menEquQue | dife 
	opLogi-> and | or | nega
	opUnar-> sumUn | resUn
	ope-> opArit | opRela | opLogi | opUnar

	bool-> true | false

	
	cadena-> char+


	comment-> @ cadena


	
	num-> numEnt | numFlo

	id-> [num cadena]*

	sum-> num + num | chara + chara 
	rest-> num - num 
	multi-> num * num 
	divi-> num // num 
	modul-> num ~ num 
	pote-> num ** num 

	nega-> - num //Se quito la cadena
	

	exprexArit-> sum | rest | mult | divi | modul | pote 

	comparacion-> (num | id | funcion |elementoArray | elementoMatrix) opComp (num | id | funcion| elementoArray | elementoMatrix)
	
	opLogica-> (num | id | funcion) opBool (num | id | funcion)
	concat -> (cadena | id | funcion) \+ (cadena | id | funcion)

	stBComment-> {
	endBComment->}
	blocComment-> stBComment cadena endBComment

	stBloc-> \
	endBloc-> /
	bloc-> stBloc (exprexArit | func | opLogica | bloc) endBloc


	paramLit-> chara | cadena 
	paramNum-> num
	param-> paramNum | paramLit
	
	declaracionVar -> tipo id
	declaracionAsig -> tipo id eql valor
	asignacion -> id eql (exprexArit | num | cadena)
	asignacionBool -> id eql (comparacion | opLogica)
	expresionLibre -> exprexArit | comparacion | opLogica | print

	and-> bool ^ bool
	or-> bool # bool

	tipo-> ent | flot | boole | char | cade
	
	lista -> tipo id \| numEnt (\| numEnt)* \| (Creo que asi es la buena)
	elementoArray -> id \[ numEnt \]
	modificacionArray -> id \[ numEnt \] eql numEnt
	
	lista-> \[ ( numEnt ( \, numEnt)* )? \]
	listaAsig-> numEnt list | numEnt (, numEnt)* | ?   lista1[1,2,3,4,5,6...]

	matrix->  \[ ( lista ( \, lista)* )? \]
	matrixAsig->numEnt matr (|numEnt (, numEnt)*|)(,(|numEnt (, numEnt)*|))?? matriz[[1,2,3,4,5],[4,5,6,7,8]]
	elementoMatrix -> id \[ numEnt \]\[ numEnt \]

	return-> bool | cadena | num

	func -> tipo id \(parametros? \) bloque "return" return endExpr
	
	parametroInt -> ent numEnt
	parametroFloat -> flot numFlo
	parametroChar -> char chara
	parametroBoole -> boole bool
	parametroCade -> cade cadena
	
	parametros -> parametroInt | parametroFloat | parametroChar | parametroBoole | parametroCade
	
	cometario -> \@ cadena 
	cometarios -> \{ cadena \}
	
	read -> "read" \( id \) endExpr
	print -> "print" \( id \) endExpr

	if -> "if" \( comparacion \) bloc elif* else?
	elif -> "elif" \( comparacion \) bloc
	else -> "else" bloc
	
	doWhile -> "do" bloc "while" \( comparacion \) endExpr
	break -> "break" endExpr
	for -> "for" \( tipo id \= num \; comparacion \; id ++ \) bloc





operacionArit-> sum | rest | multi | divi | pote | modul | sum * rest |
