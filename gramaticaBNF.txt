Terminales-----------------------
	
	mas-> '+'
	mens-> '-'
	multi-> '*'
	div-> '//'
	mod-> '~'
	pote-> '**'

	eql-> '='

	isEqu-> '=='
	mayQue-> '>'
	menQue-> '<'
	mayEquQue-> '>='
	menEquQue-> '<='
	dife-> '!='
	sumUn-> '++'
	resUn-> '--' 
	
	endExp-> '?'
	
	dot-> '.'
	comma-> ','
	parentIz-> '('
	parentDe-> ')'
	
	main-> 'main'

	true-> 'true'
	false-> 'false'

	and-> '^'
	or-> '#'
	neg-> '!'

	iniBlock-> '\'
	endBlock-> '/'

	if-> 'if'
	elif-> 'elif'
	else-> 'else'

	do-> 'do'
	while-> 'while'
	break-> 'break'
	for-> 'for'
	return-> 'return'
	
 	read-> 'leer'
	print-> 'impr'

	arreg-> 'arrx' 
	matrix-> 'matrx'

	funcion-> 'func'
	void-> 'void'
	parametro-> 'param'

	numEnt-> [0-9]+
	numFlo-> [1-9].?[0-9]*
	char-> [a-zA-Z_]
	
No Terminales------------------------

	main-> expr
	
	expr-> expr expr endExp
	expr-> opera endExp
	expr-> bool endExp
	expr-> ifBloc endExp
	expr-> doWhile endExp
	expr-> expr break endExp
	expr-> forBloc endExp
	expr-> return endExp
	expr-> blocComment endExp
	expr-> comment endExp
	expr-> num endExp
	expr-> char endExp	
	expr-> cadena endExp
	expr-> bloc endExp
	expr-> params endExp

	bool-> true | false

	
	cadena-> char+
	block-> iniBlock expr endBlock

	comment-> @ expr

	num-> numEnt | numFlo

	id-> [num cadena]*

	suma-> num mas num 
	resta-> num mens num 
	multipli-> num multi num 
	divisi-> num div num 
	modul-> num mod num 
	poten-> num pot num 
	opArit-> suma | resta | multipli | divisi | modul | poten

	isEqual-> num isEqu num | id isEqu id | cadena isEqu cadena | bool isEqu bool
	isDiffe-> num dife num | id dife id | cadena dife cadena | bool dife bool
	mayrQue-> num mayQue num 
	menrQue-> num menQue num
	mayrEquQue-> num mayEquQue num
	menrEquQue-> num menEquQue num
	opRela-> isEqual | isDiffe | mayrQue | menrQue | mayrEquQue | menrEquQue

	conjun-> bool and bool
	disyun-> bool or bool
	nega-> neg bool
	opLogi-> conjun | disyun | nega

	sumUnar-> sumUn num | sumUn id
	restUnar-> resUn num | resUn id
	opUnar-> sumUnar | restUnar

	opera-> opArit | opRela | opLogi | opUnar

	param-> bool
	params-> param ((comma param)*)?
	
	ifStruc-> if parentIz params parentDe block elif?  
	elifStruc-> elif parentIz params parentDe block elif?
	elseStruc-> else initBlock expr endBlock
	ifBloc-> ifStruc elseStruct

	doWhile-> do block while parentIz params parentDe 

	forBloc-> for parentIz params parentDe bloc	

	stBComment-> {
	endBComment->}
	blocComment-> stBComment expr endBComment

	stBloc-> \
	endBloc-> /
	bloc-> stBloc expr endBloc
	
	declaracionVar -> tipo id
	declaracionAsig -> tipo id eql valor
	asignacion -> id eql (exprexArit | num | cadena)
	asignacionBool -> id eql (comparacion | opLogica)
	expresionLibre -> exprexArit | comparacion | opLogica | print


	tipo-> ent | flot | boole | char | cade
	
	lista -> tipo id \| numEnt (\| numEnt)* \| (Creo que asi es la buena)
	elementoArray -> id \[ numEnt \]
	modificacionArray -> id \[ numEnt \] eql numEnt
	
	lista-> \[ ( numEnt ( \, numEnt)* )? \]
	listaAsig-> numEnt list | numEnt (, numEnt)* | ?   lista1[1,2,3,4,5,6...]

	matrix->  \[ ( lista ( \, lista)* )? \]
	matrixAsig->numEnt matr (|numEnt (, numEnt)*|)(,(|numEnt (, numEnt)*|))?? matriz[[1,2,3,4,5],[4,5,6,7,8]]
	elementoMatrix -> id \[ numEnt \]\[ numEnt \]

	return-> bool | cadena | num

	func -> tipo id \(parametros? \) bloque "return" return endExpr
	
	parametroInt -> ent numEnt
	parametroFloat -> flot numFlo
	parametroChar -> char chara
	parametroBoole -> boole bool
	parametroCade -> cade cadena
	
	parametros -> parametroInt | parametroFloat | parametroChar | parametroBoole | parametroCade
	
	cometario -> \@ cadena 
	cometarios -> \{ cadena \}
	
	read -> "read" \( id \) endExpr
	print -> "print" \( id \) endExpr

	if -> "if" \( comparacion \) bloc elif* else?
	elif -> "elif" \( comparacion \) bloc
	else -> "else" bloc
	
	doWhile -> "do" bloc "while" \( comparacion \) endExpr
	break -> "break" endExpr
	for -> "for" \( tipo id \= num \; comparacion \; id ++ \) bloc





operacionArit-> sum | rest | multi | divi | pote | modul | sum * rest |
